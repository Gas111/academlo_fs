import {
  VERSION,
  build,
  createFilter,
  createLogger,
  createServer,
  defineConfig,
  formatPostcssSourceMap,
  getDepOptimizationConfig,
  isDepsOptimizerEnabled,
  loadConfigFromFile,
  loadEnv,
  mergeAlias,
  mergeConfig,
  normalizePath$3,
  optimizeDeps,
  preprocessCSS,
  preview,
  require_assert,
  require_child_process,
  require_crypto,
  require_events,
  require_http,
  require_https,
  require_main,
  require_module,
  require_net,
  require_node_buffer,
  require_node_child_process,
  require_node_crypto,
  require_node_dns,
  require_node_fs,
  require_node_os,
  require_node_perf_hooks,
  require_node_readline,
  require_node_util,
  require_node_zlib,
  require_querystring,
  require_stream,
  require_tls,
  require_tty,
  require_util,
  require_worker_threads,
  require_zlib,
  resolveBaseUrl,
  resolveConfig,
  resolveEnvPrefix,
  resolvePackageData,
  resolvePackageEntry,
  searchForWorkspaceRoot,
  send$1,
  sortUserPlugins,
  transformWithEsbuild
} from "./chunk-VMAO4UBT.js";
import {
  require_node_http
} from "./chunk-5Q44J42Q.js";
import {
  require_node_https
} from "./chunk-T6P5EV2X.js";
import "./chunk-WQMCBYUW.js";
import {
  require_os,
  require_resolve
} from "./chunk-JFQ3OZEQ.js";
import {
  require_node_module,
  require_node_path,
  require_node_url
} from "./chunk-EPSHAH5I.js";
import {
  require_url
} from "./chunk-O2DKD3EA.js";
import {
  require_fs,
  require_path
} from "./chunk-RRRGGZN3.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/vite/dist/node/index.js
var import_esbuild = __toESM(require_main());
var import_node_fs = __toESM(require_node_fs());
var import_node_path = __toESM(require_node_path());
var import_node_url = __toESM(require_node_url());
var import_node_perf_hooks = __toESM(require_node_perf_hooks());
var import_node_module = __toESM(require_node_module());
var import_tty = __toESM(require_tty());
var import_path = __toESM(require_path());
var import_fs = __toESM(require_fs());
var import_events = __toESM(require_events());
var import_assert = __toESM(require_assert());
var import_util = __toESM(require_util());
var import_net = __toESM(require_net());
var import_url = __toESM(require_url());
var import_http = __toESM(require_http());
var import_stream = __toESM(require_stream());
var import_os = __toESM(require_os());
var import_child_process = __toESM(require_child_process());
var import_node_os = __toESM(require_node_os());
var import_node_crypto = __toESM(require_node_crypto());
var import_node_util = __toESM(require_node_util());
var import_node_dns = __toESM(require_node_dns());
var import_resolve = __toESM(require_resolve());
var import_crypto = __toESM(require_crypto());
var import_node_buffer = __toESM(require_node_buffer());
var import_module = __toESM(require_module());
var import_worker_threads = __toESM(require_worker_threads());
var import_zlib = __toESM(require_zlib());
var import_https = __toESM(require_https());
var import_tls = __toESM(require_tls());
var import_node_http = __toESM(require_node_http());
var import_node_https = __toESM(require_node_https());
var import_querystring = __toESM(require_querystring());
var import_node_readline = __toESM(require_node_readline());
var import_node_child_process = __toESM(require_node_child_process());
var import_node_zlib = __toESM(require_node_zlib());
var cssLangs = `\\.(css|less|sass|scss|styl|stylus|pcss|postcss)($|\\?)`;
var cssLangRE = new RegExp(cssLangs);
var isCSSRequest = (request) => cssLangRE.test(request);
var SplitVendorChunkCache = class {
  constructor() {
    this.cache = /* @__PURE__ */ new Map();
  }
  reset() {
    this.cache = /* @__PURE__ */ new Map();
  }
};
function splitVendorChunk(options = {}) {
  var _a;
  const cache = (_a = options.cache) != null ? _a : new SplitVendorChunkCache();
  return (id, { getModuleInfo }) => {
    if (id.includes("node_modules") && !isCSSRequest(id) && staticImportedByEntry(id, getModuleInfo, cache.cache)) {
      return "vendor";
    }
  };
}
function staticImportedByEntry(id, getModuleInfo, cache, importStack = []) {
  if (cache.has(id)) {
    return cache.get(id);
  }
  if (importStack.includes(id)) {
    cache.set(id, false);
    return false;
  }
  const mod = getModuleInfo(id);
  if (!mod) {
    cache.set(id, false);
    return false;
  }
  if (mod.isEntry) {
    cache.set(id, true);
    return true;
  }
  const someImporterIs = mod.importers.some((importer) => staticImportedByEntry(importer, getModuleInfo, cache, importStack.concat(id)));
  cache.set(id, someImporterIs);
  return someImporterIs;
}
function splitVendorChunkPlugin() {
  const caches = [];
  function createSplitVendorChunk(output, config) {
    var _a;
    const cache = new SplitVendorChunkCache();
    caches.push(cache);
    const build2 = (_a = config.build) != null ? _a : {};
    const format = output == null ? void 0 : output.format;
    if (!build2.ssr && !build2.lib && format !== "umd" && format !== "iife") {
      return splitVendorChunk({ cache });
    }
  }
  return {
    name: "vite:split-vendor-chunk",
    config(config) {
      var _a, _b;
      let outputs = (_b = (_a = config == null ? void 0 : config.build) == null ? void 0 : _a.rollupOptions) == null ? void 0 : _b.output;
      if (outputs) {
        outputs = Array.isArray(outputs) ? outputs : [outputs];
        for (const output of outputs) {
          const viteManualChunks = createSplitVendorChunk(output, config);
          if (viteManualChunks) {
            if (output.manualChunks) {
              if (typeof output.manualChunks === "function") {
                const userManualChunks = output.manualChunks;
                output.manualChunks = (id, api) => {
                  var _a2;
                  return (_a2 = userManualChunks(id, api)) != null ? _a2 : viteManualChunks(id, api);
                };
              }
            } else {
              output.manualChunks = viteManualChunks;
            }
          }
        }
      } else {
        return {
          build: {
            rollupOptions: {
              output: {
                manualChunks: createSplitVendorChunk({}, config)
              }
            }
          }
        };
      }
    },
    buildStart() {
      caches.forEach((cache) => cache.reset());
    }
  };
}
var export_esbuildVersion = import_esbuild.version;
export {
  build,
  createFilter,
  createLogger,
  createServer,
  defineConfig,
  export_esbuildVersion as esbuildVersion,
  formatPostcssSourceMap,
  getDepOptimizationConfig,
  isDepsOptimizerEnabled,
  loadConfigFromFile,
  loadEnv,
  mergeAlias,
  mergeConfig,
  normalizePath$3 as normalizePath,
  optimizeDeps,
  preprocessCSS,
  preview,
  resolveBaseUrl,
  resolveConfig,
  resolveEnvPrefix,
  resolvePackageData,
  resolvePackageEntry,
  e as rollupVersion,
  searchForWorkspaceRoot,
  send$1 as send,
  sortUserPlugins,
  splitVendorChunk,
  splitVendorChunkPlugin,
  transformWithEsbuild,
  VERSION as version
};
//# sourceMappingURL=vite.js.map
